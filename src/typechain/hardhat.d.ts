/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers'
import { FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase } from '@nomiclabs/hardhat-ethers/types'

import * as Contracts from '.'

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'AccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>
    getContractFactory(
      name: 'IAccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>
    getContractFactory(
      name: 'ERC721',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>
    getContractFactory(
      name: 'IERC721Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>
    getContractFactory(
      name: 'IERC721',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>
    getContractFactory(
      name: 'IERC721Receiver',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>
    getContractFactory(
      name: 'ERC721Holder',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>
    getContractFactory(
      name: 'ERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>
    getContractFactory(
      name: 'AmbrusStudioSaler',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AmbrusStudioSaler__factory>
    getContractFactory(
      name: 'E4CAlpha',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.E4CAlpha__factory>
    getContractFactory(
      name: 'E4CBadge',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.E4CBadge__factory>
    getContractFactory(
      name: 'E4CRanger',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.E4CRanger__factory>
    getContractFactory(
      name: 'E4CRangerHolder',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.E4CRangerHolder__factory>
    getContractFactory(
      name: 'IMintable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMintable__factory>
    getContractFactory(
      name: 'Mintable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mintable__factory>
    getContractFactory(name: 'IMX', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IMX__factory>
    getContractFactory(
      name: 'Registration',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Registration__factory>
    getContractFactory(
      name: 'TestERC721',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC721__factory>

    getContractAt(name: 'AccessControl', address: string, signer?: ethers.Signer): Promise<Contracts.AccessControl>
    getContractAt(name: 'IAccessControl', address: string, signer?: ethers.Signer): Promise<Contracts.IAccessControl>
    getContractAt(name: 'ERC721', address: string, signer?: ethers.Signer): Promise<Contracts.ERC721>
    getContractAt(name: 'IERC721Metadata', address: string, signer?: ethers.Signer): Promise<Contracts.IERC721Metadata>
    getContractAt(name: 'IERC721', address: string, signer?: ethers.Signer): Promise<Contracts.IERC721>
    getContractAt(name: 'IERC721Receiver', address: string, signer?: ethers.Signer): Promise<Contracts.IERC721Receiver>
    getContractAt(name: 'ERC721Holder', address: string, signer?: ethers.Signer): Promise<Contracts.ERC721Holder>
    getContractAt(name: 'ERC165', address: string, signer?: ethers.Signer): Promise<Contracts.ERC165>
    getContractAt(name: 'IERC165', address: string, signer?: ethers.Signer): Promise<Contracts.IERC165>
    getContractAt(
      name: 'AmbrusStudioSaler',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AmbrusStudioSaler>
    getContractAt(name: 'E4CAlpha', address: string, signer?: ethers.Signer): Promise<Contracts.E4CAlpha>
    getContractAt(name: 'E4CBadge', address: string, signer?: ethers.Signer): Promise<Contracts.E4CBadge>
    getContractAt(name: 'E4CRanger', address: string, signer?: ethers.Signer): Promise<Contracts.E4CRanger>
    getContractAt(name: 'E4CRangerHolder', address: string, signer?: ethers.Signer): Promise<Contracts.E4CRangerHolder>
    getContractAt(name: 'IMintable', address: string, signer?: ethers.Signer): Promise<Contracts.IMintable>
    getContractAt(name: 'Mintable', address: string, signer?: ethers.Signer): Promise<Contracts.Mintable>
    getContractAt(name: 'IMX', address: string, signer?: ethers.Signer): Promise<Contracts.IMX>
    getContractAt(name: 'Registration', address: string, signer?: ethers.Signer): Promise<Contracts.Registration>
    getContractAt(name: 'TestERC721', address: string, signer?: ethers.Signer): Promise<Contracts.TestERC721>

    // default types
    getContractFactory(name: string, signerOrOptions?: ethers.Signer | FactoryOptions): Promise<ethers.ContractFactory>
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>
    getContractAt(nameOrAbi: string | any[], address: string, signer?: ethers.Signer): Promise<ethers.Contract>
  }
}
