/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export interface E4CRangerHolderInterface extends utils.Interface {
  functions: {
    'nft()': FunctionFragment
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment
    'originalOwner(uint256)': FunctionFragment
    'totalStakingTime(uint256)': FunctionFragment
    'unstake(uint256)': FunctionFragment
    'upgradeDuration()': FunctionFragment
    'upgraded(uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'nft'
      | 'onERC721Received'
      | 'originalOwner'
      | 'totalStakingTime'
      | 'unstake'
      | 'upgradeDuration'
      | 'upgraded'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'nft', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(functionFragment: 'originalOwner', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'totalStakingTime', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'unstake', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'upgradeDuration', values?: undefined): string
  encodeFunctionData(functionFragment: 'upgraded', values: [PromiseOrValue<BigNumberish>]): string

  decodeFunctionResult(functionFragment: 'nft', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'onERC721Received', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'originalOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalStakingTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeDuration', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgraded', data: BytesLike): Result

  events: {
    'Staked(address,uint256)': EventFragment
    'Withdrawn(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment
}

export interface StakedEventObject {
  user: string
  tokenId: BigNumber
}
export type StakedEvent = TypedEvent<[string, BigNumber], StakedEventObject>

export type StakedEventFilter = TypedEventFilter<StakedEvent>

export interface WithdrawnEventObject {
  user: string
  tokenId: BigNumber
}
export type WithdrawnEvent = TypedEvent<[string, BigNumber], WithdrawnEventObject>

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>

export interface E4CRangerHolder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: E4CRangerHolderInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    nft(overrides?: CallOverrides): Promise<[string]>

    onERC721Received(
      arg0: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    originalOwner(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>

    totalStakingTime(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>

    unstake(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeDuration(overrides?: CallOverrides): Promise<[BigNumber]>

    upgraded(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>
  }

  nft(overrides?: CallOverrides): Promise<string>

  onERC721Received(
    arg0: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  originalOwner(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

  totalStakingTime(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

  unstake(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeDuration(overrides?: CallOverrides): Promise<BigNumber>

  upgraded(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

  callStatic: {
    nft(overrides?: CallOverrides): Promise<string>

    onERC721Received(
      arg0: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    originalOwner(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    totalStakingTime(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    unstake(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    upgradeDuration(overrides?: CallOverrides): Promise<BigNumber>

    upgraded(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>
  }

  filters: {
    'Staked(address,uint256)'(user?: PromiseOrValue<string> | null, tokenId?: null): StakedEventFilter
    Staked(user?: PromiseOrValue<string> | null, tokenId?: null): StakedEventFilter

    'Withdrawn(address,uint256)'(user?: PromiseOrValue<string> | null, tokenId?: null): WithdrawnEventFilter
    Withdrawn(user?: PromiseOrValue<string> | null, tokenId?: null): WithdrawnEventFilter
  }

  estimateGas: {
    nft(overrides?: CallOverrides): Promise<BigNumber>

    onERC721Received(
      arg0: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    originalOwner(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    totalStakingTime(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    unstake(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    upgradeDuration(overrides?: CallOverrides): Promise<BigNumber>

    upgraded(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>

    onERC721Received(
      arg0: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    originalOwner(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalStakingTime(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    unstake(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>

    upgraded(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
